{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useContext } from 'react';\nimport { Text } from 'react-native-svg';\nimport Context from \"./context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Indicator(_ref) {\n  var _ref$fontSize = _ref.fontSize,\n      fontSize = _ref$fontSize === void 0 ? 45 : _ref$fontSize,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      fontFamily = _ref.fontFamily,\n      children = _ref.children;\n\n  var _useContext = useContext(Context),\n      value = _useContext.value,\n      radius = _useContext.radius,\n      rotation = _useContext.rotation,\n      globalFontFamily = _useContext.fontFamily;\n\n  var textProps = {\n    transform: \"rotate(\" + (360 - rotation) + \", \" + radius + \", \" + radius + \")\"\n  };\n  var fixedValue = Number(value).toFixed();\n  if (children) return children(fixedValue, textProps);\n  return _jsx(Text, _objectSpread(_objectSpread({}, textProps), {}, {\n    x: radius,\n    y: radius + radius / 2 + 10,\n    textAnchor: \"middle\",\n    fontSize: fontSize,\n    fontFamily: fontFamily || globalFontFamily,\n    fill: color,\n    children: fixedValue\n  }));\n}","map":{"version":3,"sources":["C:/Users/black/Documents/Uni Notes/GDP/Dashboard/percy_dashboard/node_modules/react-native-cool-speedometer/src/Indicator.js"],"names":["React","useContext","Text","Context","Indicator","fontSize","color","fontFamily","children","value","radius","rotation","globalFontFamily","textProps","transform","fixedValue","Number","toFixed"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,OAAP;;AAEA,eAAe,SAASC,SAAT,OAKZ;AAAA,2BAJDC,QAIC;AAAA,MAJDA,QAIC,8BAJU,EAIV;AAAA,wBAHDC,KAGC;AAAA,MAHDA,KAGC,2BAHO,OAGP;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADDC,QACC,QADDA,QACC;;AAED,oBAKIP,UAAU,CAACE,OAAD,CALd;AAAA,MACEM,KADF,eACEA,KADF;AAAA,MAEEC,MAFF,eAEEA,MAFF;AAAA,MAGEC,QAHF,eAGEA,QAHF;AAAA,MAIcC,gBAJd,eAIEL,UAJF;;AAOA,MAAMM,SAAS,GAAG;AAChBC,IAAAA,SAAS,eAAY,MAAMH,QAAlB,WAA+BD,MAA/B,UAA0CA,MAA1C;AADO,GAAlB;AAGA,MAAMK,UAAU,GAAGC,MAAM,CAACP,KAAD,CAAN,CAAcQ,OAAd,EAAnB;AAEA,MAAIT,QAAJ,EAAc,OAAOA,QAAQ,CAACO,UAAD,EAAaF,SAAb,CAAf;AAEd,SACE,KAAC,IAAD,kCACMA,SADN;AAEE,IAAA,CAAC,EAAEH,MAFL;AAGE,IAAA,CAAC,EAAEA,MAAM,GAAGA,MAAM,GAAG,CAAlB,GAAsB,EAH3B;AAIE,IAAA,UAAU,EAAC,QAJb;AAKE,IAAA,QAAQ,EAAEL,QALZ;AAME,IAAA,UAAU,EAAEE,UAAU,IAAIK,gBAN5B;AAOE,IAAA,IAAI,EAAEN,KAPR;AAAA,cASGS;AATH,KADF;AAaD","sourcesContent":["import React, { useContext } from 'react'\nimport { Text } from 'react-native-svg'\nimport Context from './context'\n\nexport default function Indicator({\n  fontSize = 45,\n  color = 'white',\n  fontFamily,\n  children,\n}) {\n\n  const {\n    value,\n    radius,\n    rotation,\n    fontFamily: globalFontFamily,\n  } = useContext(Context)\n\n  const textProps = {\n    transform: `rotate(${360 - rotation}, ${radius}, ${radius})`,\n  }\n  const fixedValue = Number(value).toFixed() \n\n  if (children) return children(fixedValue, textProps)\n\n  return (\n    <Text\n      {...textProps}\n      x={radius}\n      y={radius + radius / 2 + 10}\n      textAnchor=\"middle\"\n      fontSize={fontSize}\n      fontFamily={fontFamily || globalFontFamily}\n      fill={color}\n    >\n      {fixedValue}\n    </Text>\n  )\n}"]},"metadata":{},"sourceType":"module"}