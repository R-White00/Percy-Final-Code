<?xml version="1.0"?>
<launch>
    <node name="usb_cam_front" pkg="usb_cam" type="usb_cam_node" required="true"  output="screen" >
    <param name="video_device" value="/dev/video1" />
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="usb_cam_front" />
    <rosparam file="/home/gdp31/.ros/camera_info/front_camera.yaml"/>
    <param name="io_method" value="mmap"/>
   </node>   
   <!--<node name="image_view_front" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="/usb_cam_front/image_raw"/>
    <param name="autosize" value="true" />
</node>--> 

    <arg name="input" default="csi://0"/>
    <arg name="input_width" default="640"/>
    <arg name="input_height" default="480"/>
    <arg name="input_codec" default="unknown"/>
    <arg name="input_loop" default="0"/>

    <node pkg="ros_deep_learning" type="video_source" name="video_source" output="screen">
        <param name="resource" value="$(arg input)"/>
        <param name="width" value="640"/>
        <param name="height" value="480"/>
        <param name="loop" value="$(arg input_loop)"/>
    </node>

    <node name="usb_cam_z" pkg="usb_cam" type="usb_cam_node" required="true"  output="screen" >
    <param name="video_device" value="/dev/video2" />
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="usb_cam_z" />
    <rosparam file="/home/gdp31/.ros/camera_info/z_camera.yaml"/>
    <param name="io_method" value="mmap"/>
   </node> 
   <!--<node name="image_view_z" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="/usb_cam_z/image_raw"/>
    <param name="autosize" value="true" />
</node> -->
    <node pkg ="rosserial_arduino" type="serial_node.py" name="Drive_Arduino" args="/dev/ttyACM0 _baud:=57600"/>
    <node pkg ="rosserial_arduino" type="serial_node.py" name="Delta_Arduino" args="/dev/ttyACM1 _baud:=115200"/>
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find percy_v4)/urdf/percy_model_v2.xacro'" />
<node name="percy_node" type="percy_node" pkg="percy_base" output="screen" /> 
 <rosparam file="$(find percy_v4)/config/diff_control.yaml" command="load"/> 
<arg name="node_start_delay" default="3.0" />  
<node name="percy_controller_manager" pkg="controller_manager" type="spawner"
        respawn="false"  output="screen"  args=" percy_joint_publisher percy_velocity_controller "/> 
    <node pkg="follower_visual" type="follower_node.py" name="follower_vs" output="screen" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' ">
   </node>
<node pkg="delta_coords" type="delta_coords_req.py" name="red_searcher_z" output="screen" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' ">
   </node> 
   <node pkg="delta_coords" type="delta_coords_req_side.py" name="red_searcher_side" output="screen" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' ">
   </node> 
   <node pkg="sensing" type="Enviro_Sense.py" name="enviro" output="screen">
   </node> 
   
   <node pkg="delta_coords" type="delta_main_server_test_for_usb_cams.py" name="main_server" output="screen" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' ">
   </node>
</launch>
