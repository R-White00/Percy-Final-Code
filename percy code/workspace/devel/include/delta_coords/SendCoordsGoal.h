// Generated by gencpp from file delta_coords/SendCoordsGoal.msg
// DO NOT EDIT!


#ifndef DELTA_COORDS_MESSAGE_SENDCOORDSGOAL_H
#define DELTA_COORDS_MESSAGE_SENDCOORDSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace delta_coords
{
template <class ContainerAllocator>
struct SendCoordsGoal_
{
  typedef SendCoordsGoal_<ContainerAllocator> Type;

  SendCoordsGoal_()
    : x(0)
    , y(0)  {
    }
  SendCoordsGoal_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)  {
  (void)_alloc;
    }



   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::delta_coords::SendCoordsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delta_coords::SendCoordsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SendCoordsGoal_

typedef ::delta_coords::SendCoordsGoal_<std::allocator<void> > SendCoordsGoal;

typedef boost::shared_ptr< ::delta_coords::SendCoordsGoal > SendCoordsGoalPtr;
typedef boost::shared_ptr< ::delta_coords::SendCoordsGoal const> SendCoordsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delta_coords::SendCoordsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delta_coords::SendCoordsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delta_coords::SendCoordsGoal_<ContainerAllocator1> & lhs, const ::delta_coords::SendCoordsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delta_coords::SendCoordsGoal_<ContainerAllocator1> & lhs, const ::delta_coords::SendCoordsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delta_coords

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::delta_coords::SendCoordsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delta_coords::SendCoordsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delta_coords::SendCoordsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delta_coords::SendCoordsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delta_coords::SendCoordsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delta_coords::SendCoordsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delta_coords::SendCoordsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd7b43fd41d4c47bf5c703cc7d016709";
  }

  static const char* value(const ::delta_coords::SendCoordsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd7b43fd41d4c47bULL;
  static const uint64_t static_value2 = 0xf5c703cc7d016709ULL;
};

template<class ContainerAllocator>
struct DataType< ::delta_coords::SendCoordsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delta_coords/SendCoordsGoal";
  }

  static const char* value(const ::delta_coords::SendCoordsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delta_coords::SendCoordsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"int32 x \n"
"int32 y \n"
;
  }

  static const char* value(const ::delta_coords::SendCoordsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delta_coords::SendCoordsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendCoordsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delta_coords::SendCoordsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delta_coords::SendCoordsGoal_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELTA_COORDS_MESSAGE_SENDCOORDSGOAL_H
